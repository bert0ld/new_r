Придумать клиент серверную многопользовательскую систему.
Выбрать для нее архитектуру.
Кратко описать:

Саму систему, ее архитектуру, чем обусловлен выбор архитектуры.
	Моя система - видеохостинг. В ней введена учетная запись для каждого пользователя. 
	Пользователь может добавлять видеофайлы сам или добавлять их от других пользователей.
	Для этой системы я выбрал Трёхуровневую архитектуру, так как она позволит реализовать
	веб-приложение, отвечающее определенным требованиям безопасности и производительности.

Какие компоненты есть в вашей архитектуре, за что каждый из них отвечает.
	В моей архитектуреесть следующие компоненты: веб-браузер, сервер приложений, 
	включающий в себя Apache(если я правильно понял, что это), сервер БД и хранилище данных.

	Веб-браузер обеспечивает представление данных пользователю.
	Сервер приложений - всю необходимую логику ,например, поиск видео, вопроизведение, 
	идентификация пользователя в системе, проверка возможности доступа определенной группы пользователей
	к определенной группе видеофайлов и так далее.
	Сервер БД - обращение к хранилищу данных.
	Хранилище данных является местом, где хранятся данные о пользователях и их видеофайлы.

Как компоненты взаимодействуют между собой.
	От веб-браузера поступает запрос клиента, обрабатывающийся на сервере приложений, который в свою очередь, 
	при необходимости, обращается к базе данных(хранилищу) посредством сервера БД и возвращает пользователю результат запроса.

Как ваша архитектура решает проблемы производительности, надежности и безопасности.
Если мой видеохостинг будет успешен, то для более быстрого доступа и воспроизведения можно будет подключить еще несколько серверов для обращения к БД, сделать распределение пользователей по ним, но это уже совсем другая история....

	Данная архитектура обладает довольно высокой производительностью из-за наличия сервера приложений:
	между серверами возможно использование высокоскоростного сетевого соединения и отдавать клиенту только результат запроса.
	Более того, выполнение запроса может быть распределено между разными серверами, и Трёхуровневая архитектура
	позволяет гибко управлять масштабированием.
	
	Проблема безопасности решается следующим образом: на сервере приложений ведется контроль доступа пользователей
	к тем или иным данным. Незарегистрированный пользователь сам по себе имеет сильно ограниченный доступ.
	Также при попытке запроса доступа к информации, которая не разрешена для пользователя, учетная запись будет блокироваться.
	Ну и сама по себе Трёхуровневая архитектура предполагает, что клиент не имеет прямого доступа к каким-либо данным из БД.
	
	Проблема надежности решаетя резервированием серверов на случай непредвиденных ситуаций или профилактических работ
	на определенном сервере, а также кэшированием ответов от сервера БД, что позволит продолжить воспроизведение даже,например,
	при возникновении кратковременных проблем с интернет-соединением.	